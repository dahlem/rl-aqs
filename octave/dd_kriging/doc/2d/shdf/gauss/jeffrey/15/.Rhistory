  if (x11 > maxX) {
    x11 <- maxX;
    x12 <- (x11 - z1Intercept) / z1Slope;
  } else if (x11 < minX) {
    x11 <- minX;
    x12 <- (x11 - z1Intercept) / z1Slope;
  }

  if (x111 > maxX) {
    x111 <- pS$x1 + (maxX - pS$x1) / 2;
    x112 <- (x111 - z1Intercept) / z1Slope;
  } else if (x111 < minX) {
    x111 <- minX + (pS$x1 - minX) / 2;
    x112 <- (x111 - z1Intercept) / z1Slope;
  }
  
  # z1: 1. case: x22 > maxY
  # z1: 2. case: x22 < minY
  if (x22 > maxY) {
    x22 <- maxY;
    x21 <- (x22 - z2Intercept) / z2Slope;
  } else if (x22 < minY) {
    x22 <- minY;
    x21 <- (x22 - z2Intercept) / z2Slope;
  }
  
  if (x222 > maxY) {
    x222 <- pS$x2 + (maxY - pS$x2) / 2;
    x221 <- (x222 - z2Intercept) / z2Slope;
  } else if (x222 < minY) {
    x222 <- minY + (pS$x2 - minY) / 2;
    x221 <- (x222 - z2Intercept) / z2Slope;
  }
  
  p <- ggplot(df, aes(x=x, y=y, z=z))
  p <- p + stat_contour()
  p <- p + scale_y_continuous(substitute(x[I], list(I = 2)))
  p <- p + scale_x_continuous(substitute(x[I], list(I = 1)))
  p <- p + opts(title="Canonical Form of the Second-order Model")
  p <- p + geom_segment(x=pS$x1,y=minY,xend=pS$x1,yend=pS$x2,linetype=2,size=0.5,colour=gray(0.7))
  p <- p + geom_text(x=pS$x1,y=minY,vjust=1.5,size=4,aes(label="x1(S)",colour=gray(0.7)))
  p <- p + geom_segment(x=minX,y=pS$x2,xend=pS$x1,yend=pS$x2,linetype=2,size=0.5,colour=gray(0.7))
  p <- p + geom_text(x=minX,y=pS$x2,vjust=1.5,size=4,aes(label="x2(S)",colour=gray(0.7)))

  # plot the transformed coordinate system
  p <- p + geom_segment(x=x111,y=x112,xend=x11,yend=x12,arrow=arrow(length=unit(0.2,"cm")))
  p <- p + geom_text(x=x11,y=x12,vjust=-1,size=4,aes(label="z2"))
  p <- p + geom_segment(x=x221,y=x222,xend=x21,yend=x22,arrow=arrow(length=unit(0.2,"cm")))
  p <- p + geom_text(x=x21,y=x22,hjust=-1,size=4,aes(label="z1"))
  p <- p + theme_bw()
  print(p)
  
  if (ps) {
    dev.off()
  }
}
library(ggplot2)
des.ca.plot()
q()
y
library(ggplot2)
des.ca.plot()
des.ca.plot()
?gray
?gray
des.ca.plot()
des.ca.plot()
des.ca.plot()
eigen <- read.table(paste(prefix, "-ca-eigen.dat", sep=""), sep=",", header=TRUE)
eigen
eigen$lambda(1)
eigen$lambda[1]
eigen$lambda[2] < 0
eigen$lambda[2] > 0
eigen <- read.table(paste(prefix, "-ca-eigen.dat", sep=""), sep=",", header=TRUE)
eigen
eigen$lambda[2] > 0
eigen$lambda > 0
if (eigen$lambda > 0) {
"bla"
}
"bla"
?ifelse
ifelse((eigen$lambda > 0) || (eigen$lambda < 0), eigen$lambda, NA)
ifelse((eigen$lambda > 0) | (eigen$lambda < 0), eigen$lambda, NA)
ifelse((eigen$lambda > 0) | (eigen$lambda < 0), TRUE, NA)
ifelse((eigen$lambda > 0) & (eigen$lambda < 0), TRUE, FALSE)
ifelse((eigen$lambda > 0) | (eigen$lambda < 0), TRUE, FALSE)
isRidge
eigen
!isRidge
des.ca.plot()
p <- ggplot()
p <- p + geom_text(aes(label="hallo"))
print(p)
p <- ggplot(1:10,1:10)
1:5
df <- data.frame(x=1:5,y=1:5)
p <- ggplot(df)
p <- p + geom_text(x=3,y=3,aes(label="hallo"))
p
p <- ggplot(df)
p
p <- p + geom_blank()
p
p <- ggplot()
p <- p + geom_blank()
p
p <- ggplot(df)
p <- p + geom_blank()
p
p <- ggplot(df, aes(x=x,y=y))
p
p <- p + geom_blank()
p
p <- p + geom_text(x=3,y=3,aes(label="hallo"))
p
p <- ggplot(df, aes(x=x,y=y))
p <- p + geom_blank()
p <- p + geom_text(x=3,y=3,label="hallo")
p
p <- ggplot(df, aes(x=x,y=y))
p <- p + geom_text(x=3,y=3,label="hallo")
p
df
p <- ggplot(df, aes(x=x,y=y))
p <- p + geom_blank()
p
p <- p + geom_text(aes(x=3,y=3,label="hallo"))
p
p <- ggplot(df, aes(x=x,y=y))
p <- p + geom_blank()
p <- p + geom_text(aes(x=3,y=3,label="hallo"))
p
p <- ggplot(df, aes(x=x,y=y))
p <- p + geom_blank()
p <- p + geom_text(x=3,y=3,aes(label=""))
p
p <- ggplot(df, aes(x=x,y=y))
p <- p + geom_point()
p
p <- p + geom_text(x=3,y=3,aes(label="a"))
p
p <- ggplot(df, aes(x=x,y=y))
p <- p + geom_point()
p <- p + geom_text(aes(x=3,y=3,label="a"))
p
mtcars
q()
y
